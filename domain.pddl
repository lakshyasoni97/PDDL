(define (domain sokorobotto)
  (:requirements :typing)
  (:types  
          shipment order location robot pallette saleitem - object
    )
  
  (:predicates  (no-robot ?l - location)
                (no-pallette ?l - location)
                (ships ?s - shipment ?o - order)
                (orders ?o - order ?i - saleitem)
                (packing-location ?l - location)
                (free ?r - robot)
                (contains ?p - pallette ?i - saleitem)
                (connected ?l_1 - location ?l_2 - location)
                (at ?obj - object ?l - location)
                (includes ?s - shipment ?i - saleitem)
                (together ?p - pallette ?r - robot)
                (started ?s - shipment)
                (available ?l - location)
                (unstarted ?s - shipment )
    )
 
  (:action robot_move 
      :parameters ( ?r - robot ?l_1  ?l_2 - location )
      :precondition (and ( at ?r ?l_1 )
                         ( no-robot ?l_2 )
                         ( free ?r)
                         ( connected ?l_1 ?l_2 )   
                      )
      :effect (and (at ?r ?l_2)
                   (no-robot ?l_1))
    )
   
  (:action robot_lift_pallette
      :parameters ( ?r - robot ?l - location ?p - pallette )
      :precondition (and ( at ?r ?l )
                         ( at ?p ?l )
                         ( free ?r ) 
                        )
      :effect(and (not(free ?r))
                  (together ?p ?r )
                  )
    )
  
  (:action robot_move_pallette 
      :parameters ( ?r - robot ?l_1  ?l_2 - location ?p - pallette )
      :precondition (and  ( at ?r ?l_1 )
                          ( together ?p ?r  )
                          ( no-robot ?l_2 )
                          ( no-pallette ?l_2)
                          ( at ?p ?l_1 ) 
                          ( connected ?l_1 ?l_2 )
                     )
      :effect (and (at ?r ?l_2)
                   ( no-robot ?l_1 )
                   ( no-pallette ?l_1 )
                   ( at ?p ?l_2 )
                    
               )
    )

  (:action place_item
            :parameters ( ?o - order ?r - robot ?l - location ?p - pallette ?i - saleitem  ?s - shipment )
            :precondition(and (at ?p ?l)
                             (contains ?p ?i)
                             (orders ?o ?i)
                             (ships ?s ?o)
                             (packing-location ?l)
                          )
            :effect(and (includes ?s ?i)
                        (not (contains ?p  ?i))
                     )
    )  
  
  (:action robot_drop_pallette
      :parameters ( ?r - robot ?l - location ?p - pallette )
      :precondition(and (at ?r ?l)
                        (together ?p ?r)
                    )
      :effect(and(not(together ?p ?r))
                 (free ?r)
              )
   )

  )